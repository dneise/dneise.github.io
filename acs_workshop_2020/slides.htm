<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <meta name="author" content="Dominik Neise" />
  <title>Official Docker Image</title>
  <style type="text/css">code{white-space: pre;}</style>
  <style type="text/css">
div.sourceCode { overflow-x: auto; }
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
  margin: 0; padding: 0; vertical-align: baseline; border: none; }
table.sourceCode { width: 100%; line-height: 100%; }
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
td.sourceCode { padding-left: 5px; }
code > span.kw { color: #007020; font-weight: bold; } /* Keyword */
code > span.dt { color: #902000; } /* DataType */
code > span.dv { color: #40a070; } /* DecVal */
code > span.bn { color: #40a070; } /* BaseN */
code > span.fl { color: #40a070; } /* Float */
code > span.ch { color: #4070a0; } /* Char */
code > span.st { color: #4070a0; } /* String */
code > span.co { color: #60a0b0; font-style: italic; } /* Comment */
code > span.ot { color: #007020; } /* Other */
code > span.al { color: #ff0000; font-weight: bold; } /* Alert */
code > span.fu { color: #06287e; } /* Function */
code > span.er { color: #ff0000; font-weight: bold; } /* Error */
code > span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
code > span.cn { color: #880000; } /* Constant */
code > span.sc { color: #4070a0; } /* SpecialChar */
code > span.vs { color: #4070a0; } /* VerbatimString */
code > span.ss { color: #bb6688; } /* SpecialString */
code > span.im { } /* Import */
code > span.va { color: #19177c; } /* Variable */
code > span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code > span.op { color: #666666; } /* Operator */
code > span.bu { } /* BuiltIn */
code > span.ex { } /* Extension */
code > span.pp { color: #bc7a00; } /* Preprocessor */
code > span.at { color: #7d9029; } /* Attribute */
code > span.do { color: #ba2121; font-style: italic; } /* Documentation */
code > span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code > span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code > span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
  </style>
  <link rel="stylesheet" type="text/css" media="screen, projection, print"
    href="http://www.w3.org/Talks/Tools/Slidy2/styles/slidy.css" />
  <script src="http://www.w3.org/Talks/Tools/Slidy2/scripts/slidy.js"
    charset="utf-8" type="text/javascript"></script>
</head>
<body>
<div class="slide titlepage">
  <h1 class="title">Official Docker Image</h1>
  <p class="author">
Dominik Neise
  </p>
  <p class="date">29.07.2020</p>
</div>
<div id="official-docker-image---or---docker-image-for-newcomers" class="slide section level1">
<h1>Official Docker Image - or - Docker Image for Newcomers</h1>
<p>Making the journey to knowledge a walk in the park</p>
<div class="figure">
<img src="imgs/question-2736480_1280.jpg" />

</div>
</div>
<div id="disclaimer" class="slide section level1">
<h1>Disclaimer</h1>
<p>I am not a docker evangelist, in fact I only used docker in a few projects so far.</p>
<p>I have not much experience with virtualization in general.</p>
<p>So this is just me showing you a preliminary proposal, and then brainstorming?</p>
</div>
<div id="whats-the-problem" class="slide section level1">
<h1>What's the problem?</h1>
<p>ACS is hard to install. (I never managed to install it from the sources yet)</p>
<p>We want a strong and growing community. So we need to reduce friction loss for newcomers.</p>
<h2 id="how-do-people-learn">How do people learn?</h2>
</div>
<div class="slide section level1">

<div class="figure">
<img src="imgs/knit-869221_1280.jpg" />

</div>
</div>
<div id="allow-the-to-pull-the-thread" class="slide section level1">
<h1>Allow the to pull the thread!</h1>
<ol style="list-style-type: decimal">
<li><p>Simple Start: download &amp; use!</p></li>
<li><p>Allows to explore ACS examples</p></li>
<li><p>Allows to develop and test a first component</p></li>
<li><p>No need to unlearn: Is extentable, once developer becomes more experienced</p></li>
<li><p>Enables to dig deeper.</p></li>
</ol>
</div>
<div id="the-proposal" class="slide section level1">
<h1>The Proposal</h1>
<p>Let's provide newcomers with a ready-made <em>minimal</em> docker image, they can just use as a start.</p>
<p>Provide information about its use in a <em>prominent place</em> on the ACS website.</p>
<div class="figure">
<img src="imgs/frontpage.png" />

</div>
<p>At the <em>same place</em> provide information on how to report any issues.</p>
</div>
<div class="slide section level1">

<div class="figure">
<img src="imgs/docker_hub_git_hub.png" />

</div>
</div>
<div id="dockerfile" class="slide section level1">
<h1>Dockerfile</h1>
<p><a href="https://github.com/dneise/acs_test/blob/master/Dockerfile" class="uri">https://github.com/dneise/acs_test/blob/master/Dockerfile</a></p>
</div>
<div class="slide section level1">

<h2 id="current-state">Current state</h2>
<p>This is based on:</p>
<ul>
<li>an ACS Dockerfile taken from LST, where it is used for the Telescope Control Unit.</li>
<li>Patrick Sizun personal build notes</li>
<li><a href="https://stash.desy.de/projects/ZNCTAT/repos/acs-rpm-docker">DESY <code>acs-rpm-docker</code></a></li>
</ul>
<h3 id="docker-hub-page">Docker hub page</h3>
<p><a href="https://hub.docker.com/r/dneise/acs_test" class="uri">https://hub.docker.com/r/dneise/acs_test</a></p>
<h3 id="git-repo">git repo</h3>
<p><a href="https://github.com/dneise/acs_test" class="uri">https://github.com/dneise/acs_test</a></p>
<h3 id="known-issues">Known Issues</h3>
<p><a href="https://github.com/dneise/acs_test/issues" class="uri">https://github.com/dneise/acs_test/issues</a></p>
</div>
<div id="journey" class="slide section level1">
<h1>Journey</h1>
<p>Download the image, it is pretty big and takes some time</p>
<pre><code>docker pull alma/acs:2020.4</code></pre>
<p>run a fresh instance of the image named <code>acs</code>.</p>
<pre><code>docker run -dP --name=acs alma/acs:2020.4</code></pre>
<p>This starts a pseudo VM on your machine, in order to play with this machine you'll need to log into that machine, via SSH. The port you'll need to connect to is random, so we need to ask the machine which port it uses:</p>
<pre><code>docker port acs
# e.g. 22/tcp -&gt; 0.0.0.0:33775</code></pre>
<p>Now we can connect to the machine, we provide passwordless SSH access. This is <strong>insecure</strong> but very convenient.</p>
<pre><code>ssh -p 33775 -X almamgr@localhost</code></pre>
</div>
<div class="slide section level1">

<h2 id="trying-it-out">Trying it out</h2>
<p>Once you are logged into the machine you can start to explore ACS examples The first thing you might want to test, is: Can I really start a program in the docker container:</p>
<pre><code>7f1e7e9be6fa almamgr:~ 1 &gt; acscommandcenter</code></pre>
<p>You should see the command center window opening. If not, please send open an issue: <strong>explain how to open issues here</strong></p>
</div>
<div class="slide section level1">

<h2 id="ending-your-day">Ending your day</h2>
<p>After a day full of new experiences with the ACS docker VM, you can just disconnect from the SSH session and stop the machine (put it to sleep), like this:</p>
<pre><code>docker stop acs</code></pre>
<h2 id="restarting">Restarting</h2>
<p>And tomorrow after a good nights sleep and full of new ideas, just do:</p>
<pre><code>docker start acs
docker port acs # note down the port
ssh -p &lt;possibly different port than yesterday&gt; -X almamgr@localhost</code></pre>
</div>
<div class="slide section level1">

<div class="figure">
<img src="imgs/cat-2201460_1280.jpg" />

</div>
</div>
<div id="almost-done---proposed-workflow" class="slide section level1">
<h1>Almost done! - Proposed Workflow</h1>
<ul>
<li>public repo, ()</li>
<li>maintained by community</li>
<li>less load for ACS core devs</li>
<li>allows newcomers to examine Dockerfile &amp; comment on it (issues)</li>
</ul>
</div>
<div id="brainstorming-time" class="slide section level1">
<h1>Brainstorming Time!</h1>
<div class="figure">
<img src="imgs/teamwork-3276682_1280.jpg" />

</div>
</div>
<div id="backup-slides" class="slide section level1">
<h1>Backup slides</h1>
<p>SSH-ing into the container with checking the port is inconvenient. Therefore I've put this into my <code>.bashrc</code>:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">sshdocker()</span><span class="kw">{</span>
    <span class="kw">if</span><span class="bu"> [</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span><span class="bu"> ]</span>
    <span class="kw">then</span>
        <span class="bu">echo</span> <span class="st">&quot;Usage: sshdocker &lt;container_name&gt;&quot;</span>
        <span class="bu">return</span> -1
    <span class="kw">fi</span>

    <span class="va">port=$(</span><span class="ex">docker</span> port <span class="va">$1</span> 22 <span class="kw">|</span> <span class="fu">cut</span> -d: -f2<span class="va">)</span>
    <span class="bu">shift</span> 1
    <span class="fu">ssh</span> -X -p <span class="va">$port</span> <span class="va">$@</span> almamgr@localhost
<span class="kw">}</span></code></pre></div>
<p>And connect to a container like:</p>
<pre><code>sshdocker &lt;container name&gt;</code></pre>
<p>Problem: No tab-completion for container name in this case.</p>
</div>
</body>
</html>
